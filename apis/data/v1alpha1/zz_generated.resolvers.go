/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1"
	v1alpha2 "github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha2"
	common "github.com/crossplane-contrib/provider-mongodbatlas/config/common"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this LakePipeline.
func (mg *LakePipeline) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      common.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha1.ProjectList{},
			Managed: &v1alpha1.Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].ClusterName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Source[i3].ClusterNameRef,
			Selector:     mg.Spec.ForProvider.Source[i3].ClusterNameSelector,
			To: reference.To{
				List:    &v1alpha2.ClusterList{},
				Managed: &v1alpha2.Cluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].ClusterName")
		}
		mg.Spec.ForProvider.Source[i3].ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source[i3].ClusterNameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      common.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha1.ProjectList{},
			Managed: &v1alpha1.Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].ClusterName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Source[i3].ClusterNameRef,
			Selector:     mg.Spec.InitProvider.Source[i3].ClusterNameSelector,
			To: reference.To{
				List:    &v1alpha2.ClusterList{},
				Managed: &v1alpha2.Cluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].ClusterName")
		}
		mg.Spec.InitProvider.Source[i3].ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source[i3].ClusterNameRef = rsp.ResolvedReference

	}

	return nil
}
